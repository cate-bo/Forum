// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Forum.Models;

public partial class ForumContext : DbContext
{
    public ForumContext()
    {
    }

    public ForumContext(DbContextOptions<ForumContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Post> Post { get; set; }

    public virtual DbSet<Thread> Thread { get; set; }

    public virtual DbSet<Topic> Topic { get; set; }

    public virtual DbSet<User> User { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=CATE_;Initial Catalog=Forum;Integrated Security=True;Encrypt=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Post>(entity =>
        {
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PosterId).HasColumnName("PosterID");
            entity.Property(e => e.PredecessorId).HasColumnName("PredecessorID");
            entity.Property(e => e.Text).IsRequired();

            entity.HasOne(d => d.Poster).WithMany(p => p.Post)
                .HasForeignKey(d => d.PosterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Post_User");

            entity.HasOne(d => d.Predecessor).WithMany(p => p.InversePredecessor)
                .HasForeignKey(d => d.PredecessorId)
                .HasConstraintName("FK_Post_Post");
        });

        modelBuilder.Entity<Thread>(entity =>
        {
            entity.Property(e => e.ThreadId).HasColumnName("ThreadID");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Opid).HasColumnName("OPID");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TopicId).HasColumnName("TopicID");

            entity.HasOne(d => d.Op).WithMany(p => p.Thread)
                .HasForeignKey(d => d.Opid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Thread_Post");

            entity.HasOne(d => d.Topic).WithMany(p => p.Thread)
                .HasForeignKey(d => d.TopicId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Thread_Topic");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.Property(e => e.TopicId).HasColumnName("TopicID");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasMany(d => d.Thread).WithMany(p => p.User)
                .UsingEntity<Dictionary<string, object>>(
                    "Follow",
                    r => r.HasOne<Thread>().WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Follow_Thread"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Follow_User"),
                    j =>
                    {
                        j.HasKey("UserId", "ThreadId");
                        j.IndexerProperty<int>("UserId").HasColumnName("UserID");
                        j.IndexerProperty<int>("ThreadId").HasColumnName("ThreadID");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}